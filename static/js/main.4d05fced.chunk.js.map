{"version":3,"sources":["Assets/doctor.jpg","screens/doctordetails/Doctordetails.js","const.js","components/formValidation.js","components/datePicker.js","screens/selectdate/selectDate.js","screens/thankyou/thankyou.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DoctorDetails","showButton","history","useHistory","Box","className","src","require","id","alt","Button","color","variant","size","onClick","push","timeslots","weekendTimeslots","PatientDetailsForm","props","handleClick","year","slotDate","getFullYear","month","getMonth","date","getDate","slotItems","JSON","parse","localStorage","getItem","results","final_results","toSearchDate","toSearchTime","slotTime","i","length","key","indexOf","console","log","items","time","setItem","stringify","handleChange","event","formData","state","target","name","value","setState","handleSubmit","submitted","setTimeout","email","phoneno","this","ref","onSubmit","fullWidth","label","onChange","validators","errorMessages","type","disabled","Component","withRouter","disableSunday","getDay","bookedTime","DateTimePicker","useState","Date","selectedDate","handleDateChange","selectedTime","handleTimeChange","utils","DateFnsUtils","DatePicker","e","map","item","setDate","disablePast","shouldDisableDate","FormControl","InputLabel","Select","style","width","MenuItem","includes","SelectDate","borderRadius","boxShadow","ThankYou","App","path","component","SlotSelection","FinalScreen","exact","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4d05fced.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/doctor.2f6b841c.jpg\";","import React from \"react\";\nimport { Button, Box} from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./doctorDetails.css\";\nimport \"../../App.css\";\n\nfunction DoctorDetails({showButton}) {\n  let history = useHistory();\n  function handleClick() {\n    history.push(\"/bookslot\");\n  }\n  return (\n    <Box className=\"doctor-details\">\n\n      <Box className=\"doctor_img\">\n        <img\n          src={require(\"/Users/pranjal/Sites/Projects/doctors-appointment/src/Assets/doctor.jpg\")}\n          id=\"image-of-doctor\"\n          alt=\"Doctor profile\"\n          \n        />\n        </Box>\n        <Box id=\"profile-info-name\"> Dr. Rakesh Poonia</Box>\n      <Box id= \"doctor-contact\">\n        <Box className= \"doctor-qualification\"> MBBS, MD(General Medicine)</Box>\n        <Box className= \"doctor-qualification\">https://sms.com/pooniarakesh</Box>\n      </Box>\n\n      {showButton && <Button id= \"book_appointment_button\" color=\"secondary\" variant= \"outlined\" size=\"large\" onClick={handleClick}>\n        {\" \"}\n        Book Appointment\n      </Button>}\n    </Box>\n\n\n  );\n}\nexport default DoctorDetails;\n","// import { MenuItem } from \"@material-ui/core\";\n\nexport const timeslots= [  \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"02:00\", \"03:00\",\"04:00\"\n];\n\nexport const weekendTimeslots= [\"09:00\", \"10:00\", \"11:00\", \"12:00\"];\n\n\n// export const weekslots= [\n//     [\"09:00\", \"10:00\", \"11:00\", \"12:00\", \"02:00\", \"03:00\",\"04:00\"],\n//     [\"09:00\", \"10:00\", \"11:00\", \"12:00\", \"02:00\", \"03:00\",\"04:00\"],\n//     [\"09:00\", \"10:00\", \"11:00\", \"12:00\", \"02:00\", \"03:00\",\"04:00\"],\n//     [\"09:00\", \"10:00\", \"11:00\", \"12:00\", \"02:00\", \"03:00\",\"04:00\"],\n//     [\"09:00\", \"10:00\", \"11:00\", \"12:00\", \"02:00\", \"03:00\",\"04:00\"]\n// ];\n\n// function restrictSlots(){\n//                 selectedDate.getDay()===1\n//                 ? weekslots[0].map((item) => {\n//                     return <MenuItem value={item}>{item}</MenuItem>;\n                    \n//                 })\n//                 : selectedDate.getDay()=== 2\n//                 ? weekslots[1].map((item) => {\n//                 return <MenuItem value={item}>{item}</MenuItem>;\n//                 })\n//                 : selectedDate.getDay()=== 3 \n//                 ? weekslots[2].map((item) => {\n//                 return <MenuItem value={item}>{item}</MenuItem>;\n//                 })\n//                 :selectedDate.getDay()=== 4\n//                 ? weekslots[3].map((item) => {\n//                 return <MenuItem value={item}>{item}</MenuItem>;\n//                 })   \n//                 :selectedDate.getDay()=== 5\n//                 ? weekslots[4].map((item) => {\n//                 return <MenuItem value={item}>{item}</MenuItem>;\n//                 }) \n//                 : weekendTimeslots.map((item) => {\n//                  return <MenuItem value={item}>{item}</MenuItem>;\n//                 })\n// }    \n\n// if(weekslots[0].includes(selectedtime)){\n\n// }\n\n\n\n\n\n\n\n\n\n            \n\n\n","import React, { Component } from \"react\";\nimport { Button, Box } from \"@material-ui/core\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { withRouter } from \"react-router-dom\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./formValidation.css\";\n\nclass PatientDetailsForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {\n        name: \"\",\n        email: \"\",\n        phoneno: \"\",\n      },\n      submitted: false,\n    };\n  }\n\n  handleClick = () => {\n    var year = this.props.slotDate.getFullYear();\n    var month = this.props.slotDate.getMonth() + 1;\n    var day = this.props.slotDate.getDate();\n    var date = day + \"-\" + month + \"-\" + year;\n\n    // Store the slots in local storage.\n    var slotItems = JSON.parse(localStorage.getItem(\"bookedSlots\")) || [];\n\n    var results = [];\n    var final_results = [];\n    var toSearchDate = date;\n    var toSearchTime = this.props.slotTime;\n\n    for (var i = 0; i < slotItems.length; i++) {\n      for (var key in slotItems[i]) {\n        if (slotItems[i][key].indexOf(toSearchDate) != -1) {\n          results.push(slotItems[i]);\n        }\n      }\n    }\n    for (var i = 0; i < results.length; i++) {\n      for (var key in results[i]) {\n        if (results[i][key].indexOf(toSearchTime) != -1) {\n          final_results.push(results[i]);\n        }\n      }\n    }\n    console.log(\"Final results:\", final_results);\n    if (final_results.length > 0) {\n      // toast(\"Slot already booked!! Please book again.\");\n      console.log(\"bnb\");\n    } else {\n      slotItems.items.push({\n        date: date,\n        time: this.props.slotTime,\n      });\n\n      localStorage.setItem(\"bookedSlots\", JSON.stringify(slotItems));\n      this.props.history.push(\"/thankyou\");\n    }\n  };\n  handleChange = (event) => {\n    const { formData } = this.state;\n    formData[event.target.name] = event.target.value;\n    this.setState({ formData });\n  };\n\n  handleSubmit = () => {\n    this.setState({ submitted: true }, () => {\n      setTimeout(() => this.setState({ submitted: false }), 5000);\n    });\n  };\n\n  render() {\n    const { formData, submitted } = this.state;\n\n    return (\n      <ValidatorForm\n        className=\"form-content\"\n        ref=\"form\"\n        onSubmit={this.handleSubmit}\n      >\n        <Box className=\"field-container\">\n          <TextValidator\n            className=\"form-element\"\n            fullWidth={true}\n            label=\"Name\"\n            variant=\"outlined\"\n            onChange={this.handleChange}\n            name=\"name\"\n            value={formData.name}\n            validators={[\"required\"]}\n            errorMessages={[\"this field is required\"]}\n          />\n        </Box>\n\n        <br />\n        <Box className=\"field-container\">\n          <TextValidator\n            fullWidth={true}\n            className=\"form-element\"\n            label=\"Email\"\n            variant=\"outlined\"\n            onChange={this.handleChange}\n            name=\"email\"\n            value={formData.email}\n            validators={[\"required\"]}\n            errorMessages={[\"this field is required\", \"email is not valid\"]}\n          />\n        </Box>\n\n        <br />\n        <Box className=\"field-container\">\n          <TextValidator\n            fullWidth={true}\n            className=\"form-element\"\n            label=\"Phone number\"\n            variant=\"outlined\"\n            onChange={this.handleChange}\n            name=\"phoneno\"\n            value={formData.phoneno}\n            validators={[\"required\"]}\n            errorMessages={[\"this field is required\"]}\n          />\n        </Box>\n\n        <br />\n        <Box id=\"button-container\">\n          <Button\n            id=\"submit-button\"\n            color=\"secondary\"\n            variant=\"outlined\"\n            type=\"submit\"\n            disabled={submitted}\n            onClick={this.handleClick}\n          >\n            {(submitted && \"Thank you\") || (!submitted && \"Submit\")}\n          </Button>\n        </Box>\n      </ValidatorForm>\n    );\n  }\n}\nexport default withRouter(PatientDetailsForm);\n","import React, { useState } from \"react\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { DatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport {InputLabel, MenuItem, FormControl, Select, Box} from \"@material-ui/core\";\nimport { timeslots, weekendTimeslots } from \"../const\";\nimport \"./datePicker.css\";\nimport PatientDetailsForm from \"./formValidation\";\n\nfunction disableSunday(date) {\n  return date.getDay() === 0;\n}\nvar bookedTime = [];\n\nfunction DateTimePicker() {\n  const [selectedDate, handleDateChange] = useState(new Date());\n  const [selectedTime, handleTimeChange] = useState(\"09:00\");\n  console.log(\n    \"In date Picker;\",\n    JSON.parse(localStorage.getItem(\"bookedSlots\"))\n  );\n\n  function setDate(e) {\n    handleDateChange(e);\n    var year = e.getFullYear();\n    var month = e.getMonth() + 1;\n    var day = e.getDate();\n    var date = day + \"-\" + month + \"-\" + year;\n    console.log(\"Date is:\", date);\n\n    var bookedSlots = JSON.parse(localStorage.getItem(\"bookedSlots\"));\n\n    bookedSlots.items.map((item) => {\n      if (item.date === date) {\n        bookedTime.push(item.time);\n      }\n    });\n    console.log(\"Booked Time are:\", bookedTime, \"for date:\", date);\n  }\n  return (\n    <Box className=\"patient-details-and-slot-booking\">\n      <Box className=\"text-select-date\">\n        <Box className=\"date-time-booking\"> Select a Date & Time</Box>\n        <Box className=\"date-time-booking\">\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <DatePicker\n              label=\"Select Date\"\n              id=\"simple-date-picker-label\"\n              value={selectedDate}\n              // onChange={handleDateChange}\n              onChange={(e) => {\n                setDate(e);\n              }}\n              disablePast\n              shouldDisableDate={disableSunday}\n            />\n          </MuiPickersUtilsProvider>\n\n          <FormControl>\n            <InputLabel id=\"simple-input-label\">Select Time</InputLabel>\n            <Select\n              id=\"simple-select-label\"\n              style={{ width: \"100px\" }}\n              value={selectedTime}\n              onChange={(e) => {\n                handleTimeChange(e.target.value);\n              }}\n            >\n              {selectedDate.getDay() === 6\n                ? weekendTimeslots.map((item) => {\n                    return (\n                      <MenuItem\n                        disabled={bookedTime.includes(item)}\n                        value={item}\n                      >\n                        {item}\n                      </MenuItem>\n                    );\n                  })\n                : timeslots.map((item) => {\n                    return (\n                      <MenuItem\n                        disabled={bookedTime.includes(item)}\n                        value={item}\n                      >\n                        {item}\n                      </MenuItem>\n                    );\n                  })}\n            </Select>\n          </FormControl>\n        </Box>\n      </Box>\n\n      <Box className=\"text-select-date\">\n        <Box id=\"enter-details-text\">Enter Details</Box>\n        <PatientDetailsForm\n          slotDate={selectedDate}\n          slotTime={selectedTime}\n        ></PatientDetailsForm>\n      </Box>\n    </Box>\n  );\n}\nexport default DateTimePicker;\n","import React from \"react\";\nimport { Button, Box } from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport DoctorDetails from \"../doctordetails/Doctordetails\";\nimport SlotSelection from \"../../components/datePicker\";\nimport \"./selectDate.css\";\nimport \"../../App.css\";\n\nfunction SelectDate() {\n  let history = useHistory();\n  function handleClick() {\n    history.push(\"/\");\n  }\n  return (\n    <Box className=\" date-selection-screen\" borderRadius={4} boxShadow={2}>\n      <Box className=\"book-date\" borderRadius={4} boxShadow={2}>\n        <Button\n          id=\"back-button\"\n          color=\"secondary\"\n          variant=\"outlined\"\n          onClick={handleClick}\n        >\n          {\" \"}\n          Back\n        </Button>\n        <DoctorDetails showButton={false}></DoctorDetails>\n      </Box>\n      <Box className=\"book-slot\">\n        <SlotSelection></SlotSelection>\n      </Box>\n    </Box>\n  );\n}\n\nexport default SelectDate;\n","import React from \"react\";\nimport { Box, Button } from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./thankyou.css\";\n\nconst ThankYou = () => {\n  var slotItems = JSON.parse(localStorage.getItem(\"bookedSlots\"));\n  console.log(\"Here in thank you screen\", slotItems.items[0]);\n  var date = slotItems.items[slotItems.items.length - 1].date;\n  var time = slotItems.items[slotItems.items.length - 1].time;\n\n  let history = useHistory();\n  function handleClick() {\n    history.push(\"/bookslot\");\n  }\n  return (\n    <Box className=\"description-of-meeting\">\n      <Box id=\"thank-you\"> Thank You! </Box>\n      <Box className=\"slot-details\">\n        Your meeting is scheduled with Dr. Rakesh Poonia.\n      </Box>\n      <Box className=\"slot-details\">\n        Booking Slot: {date} {time}\n      </Box>\n      <Button\n        id=\"book_again_button\"\n        color=\"secondary\"\n        variant=\"outlined\"\n        size=\"large\"\n        onClick={handleClick}\n      >\n        {\" \"}\n        Book Again\n      </Button>\n    </Box>\n  );\n};\nexport default ThankYou;\n","import React from \"react\";\nimport { BrowserRouter, Route} from \"react-router-dom\";\nimport Box from \"@material-ui/core/Box\";\nimport \"./App.css\";\n\nimport DoctorDetails from \"./screens/doctordetails/Doctordetails\"; //BACK BUTTON Component\nimport SlotSelection from \"./screens/selectdate/selectDate\"; // BOOK APPOINTMENT Component\nimport FinalScreen from \"./screens/thankyou/thankyou\"; //  THANK YOU Component\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <Box borderRadius={4} boxShadow={2} className=\"App\">\n        <Box className=\"App-intro\">\n          <Route path=\"/bookslot\" component={SlotSelection} />\n          <Route path=\"/thankyou\" component={FinalScreen} />\n          <Route\n            path=\"/\"\n            exact\n            render={(props) => <DoctorDetails {...props} showButton={true} />}\n          />\n        </Box>\n      </Box>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}